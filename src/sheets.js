import { config } from "./config.js";
import { google } from "googleapis";

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
const RANGES = {
  CATEGORIES: "Categories!A2:A50",
  WALLETS: "Wallets!B2:B20",
  WALLETS_FULL: "Wallets!B2:D",
  TRANSACTIONS: "Transactions!A:G",
};

const spreadsheetId = config.spreadsheetId;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function createAuth() {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ credentials –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (config.googleCredentialsB64) {
    console.log("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ GOOGLE_CREDENTIALS_B64");
    const credentialsJson = Buffer.from(
      config.googleCredentialsB64,
      "base64"
    ).toString("utf-8");
    return new google.auth.GoogleAuth({
      credentials: JSON.parse(credentialsJson),
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
  } else {
    // Fallback –Ω–∞ —Ñ–∞–π–ª credentials.json –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log("üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ credentials.json");
    return new google.auth.GoogleAuth({
      keyFile: "credentials.json",
      scopes: ["https://www.googleapis.com/auth/spreadsheets"],
    });
  }
}

const auth = createAuth();

let sheetsClient = null;
async function getSheetsClient() {
  if (sheetsClient) return sheetsClient;
  const client = await auth.getClient();
  sheetsClient = google.sheets({ version: "v4", auth: client });
  return sheetsClient;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param {string} range - –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
 * @returns {Promise<Array<Array<string>>>} - –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
 */
async function getSheetValues(range) {
  const sheets = await getSheetsClient();
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });

  return res.data.values || [];
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param {string} range - –¥–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
 * @returns {Promise<Array<string>>} - –º–∞—Å—Å–∏–≤ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
async function getValuesFromRange(range) {
  const rows = await getSheetValues(range);
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  return rows
    .flat()
    .map((value) => (value ? value.toString().trim() : ""))
    .filter((value) => value !== "");
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Categories!A2:A50
 * @returns {Promise<Array<string>>}
 */
async function getCategories() {
  return getValuesFromRange(RANGES.CATEGORIES);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Wallets!B2:B20
 * @returns {Promise<Array<string>>}
 */
async function getWallets() {
  return getValuesFromRange(RANGES.WALLETS);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { name, balance, currency } –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ Wallets!B2:D
 * –û–∂–∏–¥–∞–µ—Ç—Å—è:
 * - –≤ B2:B ‚Äî –∏–º—è –∫–æ—à–µ–ª—å–∫–∞
 * - –≤ C2:C ‚Äî –±–∞–ª–∞–Ω—Å (—á–∏—Å–ª–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∑–∞–ø—è—Ç–æ–π)
 * - –≤ D2:D ‚Äî –≤–∞–ª—é—Ç–∞ (USD, EUR, RUB –∏ —Ç.–¥.)
 */
async function getBalances() {
  try {
    const rows = await getSheetValues(RANGES.WALLETS_FULL);

    const balances = rows.map((r) => {
      try {
        const name = r[0] || "";
        const rawBalance = r[1] || "";
        const currency = r[2] || "";

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–∞–Ω—Å –≤ —á–∏—Å–ª–æ
        const cleanedBalance = String(rawBalance)
          .replace(/\s/g, "")
          .replace(",", ".");
        const num = Number(cleanedBalance);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (name.trim() === "") {
          console.warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ—à–µ–ª—å–∫–∞");
          return null;
        }

        return {
          name: name.trim(),
          balance: isNaN(num) ? 0 : num,
          currency: currency.trim().toUpperCase() || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞", // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
      } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`);
        return null;
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    return balances.filter((balance) => balance !== null);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`);
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã");
  }
}

// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: node src/sheets.js test
if (process.argv[2] === "test") {
  (async () => {
    try {
      const bal = await getBalances();
      console.log("–ë–∞–ª–∞–Ω—Å—ã (getBalances):");
      console.table(bal);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ getBalances():", err.message || err);
    }
  })();
}

// –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É

async function appendTransaction({ date, amount, category, wallet, note }) {
  const sheets = await getSheetsClient();

  // –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: A, B, C, D, E, F, G
  // B –∏ D –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–∏—Ä–∞—Ç—å —Ñ–æ—Ä–º—É–ª—ã
  const values = [[date, "", amount, "", category, wallet, note]];

  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range: RANGES.TRANSACTIONS,
    valueInputOption: "USER_ENTERED",
    insertDataOption: "INSERT_ROWS", // –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü
    requestBody: {
      values,
    },
  });

  console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
}

export const sheets = {
  getWallets,
  appendTransaction,
  getBalances,
  getCategories,
};
