// src/index.js
import dotenv from "dotenv";
dotenv.config();

import TelegramBot from "node-telegram-bot-api";
import { getBalances, appendTransaction } from "./sheets.js";

const TOKEN = process.env.BOT_TOKEN;
if (!TOKEN) {
  console.error("ERROR: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
  process.exit(1);
}

// –ü–∞—Ä—Å–∏–º ALLOWED_USERS (–µ—Å–ª–∏ –ø—É—Å—Ç–æ => —Ç–æ–ª—å–∫–æ developer —Ä–∞–∑—Ä–µ—à—ë–Ω)
const allowedEnv = process.env.ALLOWED_USERS || "";
const allowedUsers = new Set(
  allowedEnv
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean)
);

// –ï—Å–ª–∏ ALLOWED_USERS –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
// –°–µ–π—á–∞—Å –±—É–¥–µ–º —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.
// –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫.
// -------------------------
if (allowedUsers.size === 0) {
  console.warn(
    "ALLOWED_USERS –ø—É—Å—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω telegram_id –≤ .env –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
  );
}
// -------------------------

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const bot = new TelegramBot(TOKEN, { polling: true });

function isAllowed(userId) {
  if (allowedUsers.size === 0) return false; // –ø–æ–∫–∞ —Ç—Ä–µ–±—É–µ–º —è–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫
  return allowedUsers.has(String(userId));
}

// /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!isAllowed(userId)) {
    await bot.sendMessage(chatId, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
    return;
  }

  const text = [
    `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name || ""}!`,
    "",
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
    "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º",
    "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–≤–æ–ø—Ä–æ—Å–Ω–∏–∫) ‚Äî –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ",
  ].join("\n");

  await bot.sendMessage(chatId, text);
});

// /balance
bot.onText(/\/balance/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!isAllowed(userId)) {
    await bot.sendMessage(chatId, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
    return;
  }

  try {
    await bot.sendMessage(chatId, "‚è≥ –ü–æ–ª—É—á–∞—é –±–∞–ª–∞–Ω—Å—ã...");
    const balances = await getBalances(); // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{name, balance}, ...]
    if (!balances || balances.length === 0) {
      await bot.sendMessage(
        chatId,
        "–ë–∞–ª–∞–Ω—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å –ª–∏—Å—Ç Wallets)."
      );
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const lines = balances.map((b) => {
      // —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç–æ–π –∏ –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏
      const val = typeof b.balance === "number" ? b.balance : Number(b.balance);
      const textVal = isNaN(val)
        ? "0"
        : val.toLocaleString("ru-RU", {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
          });
      return `‚Ä¢ ${b.name}: ${textVal}`;
    });

    const resp = ["üíº –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:", ...lines].join("\n");
    await bot.sendMessage(chatId, resp);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ /balance:", err);
    await bot.sendMessage(
      chatId,
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤: ${err.message || err}`
    );
  }
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
bot.on("polling_error", (err) => {
  console.error("Polling error:", err);
});

//add
const userStates = new Map();
// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: userStates.set(userId, { step: "amount", data: {} })

// –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏–º)
const categories = [
  "–∑–ø –°–µ—Ä–≥–µ–π",
  "–∑–ø –ê–Ω—è",
  "–∞—Ä–µ–Ω–¥–∞ –≥–∞—Ä–∞–∂",
  "–ø—Ä–æ–¥—É–∫—Ç—ã",
  "–º–∞—à–∏–Ω–∞ - –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
  "–º–∞—à–∏–Ω–∞ - —Ç–æ–ø–ª–∏–≤–æ",
  "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
  "—à–∫–æ–ª–∞",
  "–≤–∫—É—Å–Ω—è—à–∫–∏",
  "–∂–∫—É",
  "–ø—Ä–æ–¥–∞–∂–∞",
  "–ø–µ—Ä–µ–≤–æ–¥",
  "–î–∞—à–∞",
  "–ø–æ–º–æ—â—å",
  "–µ–¥–∞ –≤–Ω–µ –¥–æ–º–∞",
  "–æ–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
  "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
  "—É—Å–ª—É–≥–∏",
  "–¥–æ–º",
  "–º–µ–¥–∏—Ü–∏–Ω–∞",
  "—Ö–æ–∑—Ç–æ–≤–∞—Ä—ã",
  "–∫–æ—Å–º–µ—Ç–∏–∫–∞",
  "–∫–µ—à–±–µ–∫",
  "–ø–æ–¥–∞—Ä–∫–∏",
];

// –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ (–ø–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏–º)
const wallets = [
  "–Ω–∞–ª–∏—á–Ω—ã–µ –°–µ—Ä–≥–µ–π",
  "–Ω–∞–ª–∏—á–Ω—ã–µ –ê–Ω—è",
  "–ú–¢–ë –°–µ—Ä–≥–µ–π",
  "–ú–¢–ë –ê–Ω—è",
  "—Å—Ç–∞—Ç—É—Å–±–∞–Ω–∫",
  "—Ö–∞–ª–≤–∞",
  "–∞–ª—å—Ñ–∞ –∫—Ä–µ–¥–∏—Ç",
  "–∫–æ–ø–∏–ª–∫–∞",
];

// /add
bot.onText(/\/add/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  if (!isAllowed(userId)) {
    await bot.sendMessage(chatId, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.");
    return;
  }

  userStates.set(userId, { step: "amount", data: {} });
  await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123.45):");
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ (–¥–ª—è —à–∞–≥–æ–≤ –≤–æ–ø—Ä–æ—Å–Ω–∏–∫–∞)
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id;

  // –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  if (!userStates.has(userId)) return;

  const state = userStates.get(userId);

  // –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –¥–∏–∞–ª–æ–≥
  if (msg.text.startsWith("/")) return;

  switch (state.step) {
    case "amount":
      {
        const val = msg.text.replace(",", ".").trim();
        const num = parseFloat(val);
        if (isNaN(num)) {
          await bot.sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 123.45");
          return;
        }
        state.data.amount = num;
        state.step = "category";

        const opts = {
          reply_markup: {
            keyboard: categories.map((c) => [c]),
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        };
        await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", opts);
      }
      break;

    case "category":
      {
        const cat = msg.text.trim();
        if (!categories.includes(cat)) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
          );
          return;
        }
        state.data.category = cat;
        state.step = "wallet";

        const opts = {
          reply_markup: {
            keyboard: wallets.map((w) => [w]),
            one_time_keyboard: true,
            resize_keyboard: true,
          },
        };
        await bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫:", opts);
      }
      break;

    case "wallet":
      {
        const wal = msg.text.trim();
        if (!wallets.includes(wal)) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª—ë–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."
          );
          return;
        }
        state.data.wallet = wal;
        state.step = "date";
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î-–ú–ú-–ì–ì–ì–ì):", {
          reply_markup: { remove_keyboard: true },
        });
      }
      break;

    case "date":
      {
        const parts = msg.text.trim().split("-");
        if (parts.length !== 3) {
          await bot.sendMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î-–ú–ú-–ì–ì–ì–ì");
          return;
        }
        const [dd, mm, yyyy] = parts.map((p) => parseInt(p, 10));
        const dt = new Date(yyyy, mm - 1, dd);
        if (isNaN(dt.getTime())) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
          );
          return;
        }
        state.data.date = dt.toISOString().split("T")[0]; // —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        state.step = "note";
        await bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:");
      }
      break;

    case "note":
      {
        state.data.note = msg.text.trim();

        // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        try {
          await appendTransaction(state.data);
          await bot.sendMessage(chatId, "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", err);
          await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.");
        }

        // –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.delete(userId);
      }
      break;
  }
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...");
